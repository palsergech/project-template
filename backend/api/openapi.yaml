openapi: 3.0.0
info:
  title: Document Management API
  version: 1.0.0

servers:
  - url: ""
    description: API base path

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponseDTO:
      oneOf:
        - $ref: '#/components/schemas/ServerErrorDTO'
        - $ref: '#/components/schemas/AuthErrorDTO'
        - $ref: '#/components/schemas/NotFoundErrorDTO'
        - $ref: '#/components/schemas/BadRequestErrorDTO'
        - $ref: '#/components/schemas/DomainErrorDTO'

    ServerErrorDTO:
      type: object
      required:
        - type
        - message
      properties:
        type:
          type: string
          enum: [SERVER_ERROR]
          example: SERVER_ERROR
        message:
          type: string
          example: "Internal server error occurred"

    NotFoundErrorDTO:
      type: object
      required:
        - type
        - details
      properties:
        type:
          type: string
          enum: [NOT_FOUND_ERROR]
          example: NOT_FOUND_ERROR
        details:
          type: object
          required:
            - objectType
            - key
          properties:
            objectType:
              type: string
              example: document
            key:
              type: string
              example: "123"

    BadRequestErrorDTO:
      type: object
      required:
        - type
        - message
      properties:
        type:
          type: string
          enum: [BAD_REQUEST]
          example: BAD_REQUEST
        message:
          type: string
          example: "Invalid request format"

    AuthErrorDTO:
      type: object
      required:
        - type
        - message
      properties:
        type:
          type: string
          enum: [ AUTH_ERROR ]
          example: AUTH_ERROR
        message:
          type: string
          example: "Invalid access token"

    DomainErrorDTO:
      type: object
      required:
        - type
        - code
      properties:
        type:
          type: string
          enum: [DOMAIN_ERROR]
          example: DOMAIN_ERROR
        message:
          type: string
          example: "You are not the owner of this document"
        details:
          type: object
          additionalProperties: true

    UserProfileDTO:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          example: "8f14e45f-ea9d-4e1a-9f5a-1f3c2b7c9a10"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "Jane Doe"

    UpdateUserProfileReqDTO:
      description: Full update payload for user profile
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
        name:
          type: string

    PatchUserProfileReqDTO:
      description: Partial update payload for user profile
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
      minProperties: 1

    NoteDTO:
      type: object
      required:
        - id
        - userId
        - title
        - content
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: "7c9e6679-7425-40de-944b-e07fc1f90ae7"
        userId:
          type: string
          format: uuid
          example: "8f14e45f-ea9d-4e1a-9f5a-1f3c2b7c9a10"
        title:
          type: string
          example: "Shopping list"
        content:
          type: string
          example: "- Milk\n- Bread\n- Eggs"
        createdAt:
          type: string
          format: date-time
          example: "2025-10-15T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-10-15T11:00:00Z"

    CreateNoteReqDTO:
      type: object
      required:
        - userId
        - title
        - content
      properties:
        userId:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string

    UpdateNoteReqDTO:
      description: Full update payload for a note
      type: object
      required:
        - userId
        - title
        - content
      properties:
        userId:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string

    PatchNoteReqDTO:
      description: Partial update payload for a note
      type: object
      properties:
        userId:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
      minProperties: 1

    PageOfNotesDTO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/NoteDTO'
        page:
          type: integer
          minimum: 0
          example: 0
        size:
          type: integer
          minimum: 1
          example: 20
        total:
          type: integer
          minimum: 0
          example: 123
        totalPages:
          type: integer
          minimum: 0
          example: 7

  responses:
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerErrorDTO'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundErrorDTO'

    AuthError:
      description: authentication or authorization error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthErrorDTO'

    BadRequestError:
      description: Invalid request format
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestErrorDTO'

    DefaultError:
      description: Default error response
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ServerErrorDTO'
              - $ref: '#/components/schemas/AuthErrorDTO'
              - $ref: '#/components/schemas/BadRequestErrorDTO'
              - $ref: '#/components/schemas/NotFoundErrorDTO'
              - $ref: '#/components/schemas/DomainErrorDTO'

paths:

  /greeting:
    get:
      operationId: getGreeting
      tags: [Greeting]
      summary: Get greeting
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Greeting
          content:
            application/json:
              schema:
                type: string
        default:
          $ref: '#/components/responses/DefaultError'

  /profile:
    get:
      operationId: getUserProfile
      tags: [UserProfile]
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
        default:
          $ref: '#/components/responses/DefaultError'
    patch:
      operationId: patchUserProfile
      parameters:
        - in: query
          name: retry
          schema:
            type: boolean
            default: false
          description: Retry update if optimistic locking error occurred
      tags: [UserProfile]
      summary: Partially update current user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserProfileReqDTO'
      responses:
        '200':
          description: Updated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
        default:
          $ref: '#/components/responses/DefaultError'
