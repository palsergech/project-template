name: Deploy Backend

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  REGISTRY: ghcr.io

jobs:

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment: stage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.GITHUB_SHA_SHORT }}
            ${{ env.IMAGE_NAME }}:${{ env.GITHUB_REF_SLUG }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
        env:
          IMAGE_NAME: ${{ env.REGISTRY }}/${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/backend

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    concurrency:
      group: ${{ github.event.inputs.environment }}
      cancel-in-progress: false
    permissions:
      contents: read
      packages: read
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: Set up BUILD_VERSION env variable
        run: |
          if [[ "${GITHUB_REF_NAME}" == release/* ]]; then
            VERSION=${GITHUB_REF_NAME#release/}
            BUILD_VERSION="${VERSION}-${GITHUB_SHA_SHORT}"
          else
            BUILD_VERSION="${GITHUB_REF_NAME}-${GITHUB_SHA_SHORT}"
          fi
          echo "BUILD_VERSION=${BUILD_VERSION}" >> $GITHUB_ENV
      - name: Install helmwave
        uses: helmwave/setup-action@v0.3.0
        with:
          version: '0.41.1'
      - uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      - name: Deploy helm charts
        working-directory: ./devops/k8s/backend
        run: |
          helmwave up --yml --build
          helmwave status
        env:
          HELMWAVE_KUBEDOG_ENABLED: "true"
          HELMWAVE_PROGRESS: "true"
          HELMWAVE_DIFF_SHOW_SECRET: "false"
          ENV_NAME: ${{ github.event.inputs.environment }}
          K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }}
          IMAGE_NAME: ${{ env.REGISTRY}}/${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/backend
          IMAGE_TAG: ${{ env.GITHUB_SHA_SHORT }}
          DB_HOST: ${{ vars.BC_DB_HOST }}
          DB_PORT: ${{ vars.BC_DB_PORT }}
          DB_NAME: ${{ vars.BC_DB_NAME }}
          DB_USER: ${{ vars.BC_DB_USER }}
          DB_PASS: ${{ secrets.BC_DB_PASS }}
          API_KEY: ${{ secrets.BC_API_KEY }}
          GH_REGISTRY_CONTAINER_READ: ${{ secrets.GH_REGISTRY_CONTAINER_READ }}
          ALLOWED_ORIGINS: ${{ vars.BC_ALLOWED_ORIGINS }}
          KC_PUBLIC_URL: ${{ vars.KC_PUBLIC_URL }}
#          KC_USERS_REALM: ${{ vars.KC_USERS_REALM }}
#          KC_API_CLIENT_ID: ${{ vars.BC_KC_API_CLIENT_ID }}
#          KC_API_USERNAME: ${{ vars.BC_KC_API_USERNAME }}
#          KC_API_PASSWORD: ${{ secrets.BC_KC_API_PASSWORD }}
